

services:
  #############################################
  # Message Broker and Streaming Components
  #############################################
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      #JMX_PORT: 8080
      #KAFKA_OPTS: "-javaagent:/opt/jmx_prometheus_javaagent-0.18.0.jar=8080:/opt/zookeeper.yml"

    ports:
      - "2181:2181"
    networks:
      - kafka-network
    #volumes:
      #- ./jars/jmx_prometheus_javaagent-0.18.0.jar:/opt/jmx_prometheus_javaagent-0.18.0.jar
      #- ./jars/zookeeper.yml:/opt/zookeeper.yml
      
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  kafka:
    image: bitnami/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      #JMX_PORT: 9300
      #KAFKA_OPTS: "-javaagent:/opt/jmx_prometheus_javaagent-0.18.0.jar=9300:/opt/kafka.yml"
    ports:
      - "9092:9092"
      #- "9300:9300"
    networks:
      - kafka-network
    #volumes:
      #- ./jars/jmx_prometheus_javaagent-0.18.0.jar:/opt/jmx_prometheus_javaagent-0.18.0.jar
      #- ./jars/kafka.yml:/opt/kafka.yml  # Configuration file for metrics
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${KAFKA_MEMORY_LIMIT:-1G}
          cpus: ${KAFKA_CPU_LIMIT:-1.0}

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8081:8081"
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  #############################################
  # Data Storage Components
  #############################################
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: feature_cluster
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      MAX_HEAP_SIZE: 512M
      HEAP_NEWSIZE: 128M
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - cassandra-data:/var/lib/cassandra
    deploy:
      resources:
        limits:
          memory: ${CASSANDRA_MEMORY_LIMIT:-1G}
          cpus: ${CASSANDRA_CPU_LIMIT:-1.0}

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: feature_store
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-1G}
          cpus: ${POSTGRES_CPU_LIMIT:-1.0}

  #############################################
  # Management UIs
  #############################################
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    ports:
      - "8080:8080"
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    networks:
      - kafka-network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
  ############################################
  #Monitoring configuration
  ##############################################
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #   networks:
  #     - kafka-network
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'

  # #############################################
  # Workflow Management
  #############################################
  airflow:
    build:
      context: .
      dockerfile: Dockerfile
    image: apache/airflow:latest
    container_name: airflow
    command: standalone
    environment:
        # Core Airflow settings
        AIRFLOW_HOME: /opt/airflow
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        AIRFLOW__CORE__LOAD_EXAMPLES: "false"
        AIRFLOW__CORE__PARALLELISM: 4
        AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT: 600
        
        # Database settings
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow_db
        AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: 5
        AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: 10
        AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: 1800
        
        # Webserver settings
        AIRFLOW__WEBSERVER__SECRET_KEY: your_secret_key_here
        AIRFLOW__WEBSERVER__LOG_FETCH_TIMEOUT_SEC: "60"
        AIRFLOW__WEBSERVER__WORKERS: 2
        AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL: 30
        AIRFLOW__WEBSERVER__WORKER_TIMEOUT: 120
        
        # Authentication
        _AIRFLOW_WWW_USER_USERNAME: test
        _AIRFLOW_WWW_USER_PASSWORD: test
        
        # Logging
        AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
        AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: /opt/airflow/logs/dag_processor_manager/dag_processor_manager.log
    ports:
        - "8089:8080"
    volumes:
        - ./airflow/dags:/opt/airflow/dags
        - ./airflow/logs:/opt/airflow/logs
        - ./airflow/plugins:/opt/airflow/plugins
        - ./airflow/config:/opt/airflow/config
        - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
        postgres:
            condition: service_healthy
    networks:
        - kafka-network
    healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval: 15s
        timeout: 10s
        retries: 3
        start_period: 40s
    deploy:
        resources:
            limits:
                memory: 2G
                cpus: "1.0"
            reservations:
                memory: 2G
                cpus: "1.0"
    restart: unless-stopped
    user: "50000:0"
    ulimits:
        nofile:
            soft: 65536
            hard: 65536


  #############################################
  # Data Processing
  #############################################
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8083:8080"
      - "7077:7077"
    volumes:
      - ./spark/data_processing.py:/opt/bitnami/spark/data_processing.py
      - ./jars/postgresql-42.7.3.jar:/opt/bitnami/spark/jars/postgresql-42.7.3.jar
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${SPARK_MEMORY_LIMIT:-2G}
          cpus: ${SPARK_CPU_LIMIT:-2.0}

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
    - ./spark/data_processing.py:/opt/bitnami/spark/data_processing.py
    - ./jars/postgresql-42.7.3.jar:/opt/bitnami/spark/jars/postgresql-42.7.3.jar
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${SPARK_MEMORY_LIMIT:-2G}
          cpus: ${SPARK_CPU_LIMIT:-2.0}

  zeppelin:
    image: apache/zeppelin:0.10.1
    container_name: zeppelin
    user: "${UID}:${GID}"  # Runs as the current user
    depends_on:
      - spark-master
      - postgres
    ports:
      - "8090:8080"
    volumes:
      - ./notebook:/zeppelin/notebook
      - ./jars:/zeppelin/jars
      - ./spark:/opt/bitnami/spark/bin/spark-submit
    environment:
      - ZEPPELIN_LOG_DIR=/zeppelin/logs
      - SPARK_HOME=/opt/bitnami/spark/bin/spark-submit
      - MASTER=spark://spark-master:7077
      - ZEPPELIN_SPARK_USEHIVE=true



volumes:
  postgres-data:
  cassandra-data:

networks:
  kafka-network:
    driver: bridge
    external: true